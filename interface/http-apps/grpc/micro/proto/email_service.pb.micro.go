// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: email_service.proto

package ms_email_grpc_api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Email service

func NewEmailEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Email service

type EmailService interface {
	// SendEmail send email
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...client.CallOption) (*SendEmailResponse, error)
	// ETListAll list all EmailTemplate
	ETListAll(ctx context.Context, in *ETListAllRequest, opts ...client.CallOption) (*ETListAllResponse, error)
}

type emailService struct {
	c    client.Client
	name string
}

func NewEmailService(name string, c client.Client) EmailService {
	return &emailService{
		c:    c,
		name: name,
	}
}

func (c *emailService) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...client.CallOption) (*SendEmailResponse, error) {
	req := c.c.NewRequest(c.name, "Email.SendEmail", in)
	out := new(SendEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailService) ETListAll(ctx context.Context, in *ETListAllRequest, opts ...client.CallOption) (*ETListAllResponse, error) {
	req := c.c.NewRequest(c.name, "Email.ETListAll", in)
	out := new(ETListAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Email service

type EmailHandler interface {
	// SendEmail send email
	SendEmail(context.Context, *SendEmailRequest, *SendEmailResponse) error
	// ETListAll list all EmailTemplate
	ETListAll(context.Context, *ETListAllRequest, *ETListAllResponse) error
}

func RegisterEmailHandler(s server.Server, hdlr EmailHandler, opts ...server.HandlerOption) error {
	type email interface {
		SendEmail(ctx context.Context, in *SendEmailRequest, out *SendEmailResponse) error
		ETListAll(ctx context.Context, in *ETListAllRequest, out *ETListAllResponse) error
	}
	type Email struct {
		email
	}
	h := &emailHandler{hdlr}
	return s.Handle(s.NewHandler(&Email{h}, opts...))
}

type emailHandler struct {
	EmailHandler
}

func (h *emailHandler) SendEmail(ctx context.Context, in *SendEmailRequest, out *SendEmailResponse) error {
	return h.EmailHandler.SendEmail(ctx, in, out)
}

func (h *emailHandler) ETListAll(ctx context.Context, in *ETListAllRequest, out *ETListAllResponse) error {
	return h.EmailHandler.ETListAll(ctx, in, out)
}
